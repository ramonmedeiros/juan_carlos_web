{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","open","options","loading","length","searchTitle","bind","event","title","target","value","this","timeout","clearTimeout","setTimeout","fetch","encodeURIComponent","method","then","response","json","data","console","log","Response","Search","setState","catch","error","magnetURI","WebTorrent","add","torrent","files","find","file","name","endsWith","appendTo","Autocomplete","id","style","width","onOpen","onClose","getOptionSelected","option","Title","getOptionLabel","renderInput","params","TextField","label","variant","onChange","ev","InputProps","endAdornment","CircularProgress","color","size","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qyBAyGeA,E,kDA5Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDA,MAAQA,EACb,EAAKC,MAAQ,CACXC,MAAM,EACNC,QAAS,IAEX,EAAKC,QAAU,EAAKH,MAAMC,MAAgC,IAAxB,EAAKC,QAAQE,OAC/C,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBARF,E,sDAWnB,c,yBAGA,SAAYC,GAAQ,IAAD,OACbC,EAAQD,EAAME,OAAOC,MACrBC,KAAKC,SAASC,aAAaF,KAAKC,SACpCD,KAAKC,QAAUE,YAAW,WACxBC,MAtBO,sDAsBMC,mBAAmBR,GAAQ,CACtCS,OAAQ,QAEPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GACU,UAAlBA,EAAKG,WAGTF,QAAQC,IAAIF,EAAKI,QACjB,EAAKC,SAAL,2BAAmB,EAAK1B,OAAxB,IAA+BE,QAASmB,EAAKI,cAE9CE,OAAM,SAACC,GACNN,QAAQM,MAAM,SAAUA,QAE3B,O,yBAGL,SAAYC,IACG,IAAIC,KAEVC,IAAIF,GAAW,SAAUG,GAEnBA,EAAQC,MAAMC,MAAK,SAAUC,GACtC,OAAOA,EAAKC,KAAKC,SAAS,WAKvBC,SAAS,e,oBAIlB,WAAU,IAAD,OAEP,OACE,cAACC,EAAA,EAAD,CACEC,GAAG,oBACHC,MAAO,CAAEC,MAAO,KAChBzC,KAAMU,KAAKX,MAAMC,KACjB0C,OAAQ,WACN,EAAKjB,SAAL,2BAAmB,EAAK1B,OAAxB,IAA+BC,MAAM,MAEvC2C,QAAS,WACP,EAAKlB,SAAL,2BAAmB,EAAK1B,OAAxB,IAA+BC,MAAM,MAEvC4C,kBAAmB,SAACC,EAAQpC,GAAT,OAAmBoC,EAAOC,QAAUrC,EAAMqC,OAC7DC,eAAgB,SAAAF,GAAM,OAAIA,EAAOC,OACjC7C,QAASS,KAAKX,MAAME,QACpBC,QAASQ,KAAKR,QACd8C,YAAa,SAAAC,GAAM,OACjB,cAACC,EAAA,EAAD,2BACMD,GADN,IAEEE,MAAM,uBACNC,QAAQ,WACRC,SAAU,SAAAC,GAAO,EAAKlD,YAAYkD,IAClCC,WAAU,2BACLN,EAAOM,YADF,IAERC,aACE,eAAC,WAAD,WACG,EAAKtD,QACJ,cAACuD,EAAA,EAAD,CAAkBC,MAAM,UAAUC,KAAM,KACtC,KACHV,EAAOM,WAAWC,4B,GAnFnBI,aCCHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.27529cbe.chunk.js","sourcesContent":["import './App.css';\nimport { Component, Fragment } from 'react';\nimport WebTorrent from 'webtorrent';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\n//const TPB = \"https://thepiratebay-plus.strem.fun/manifest.json\"\n// download files and read it \nconst IMDB = \"http://www.omdbapi.com/?apikey=e9843e26&page=100&s=\"\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.props = props\n    this.state = {\n      open: false,\n      options: [],\n    }\n    this.loading = this.state.open && this.options.length === 0;\n    this.searchTitle = this.searchTitle.bind(this);\n  }\n\n  componentDidUpdate() {\n  }\n\n  searchTitle(event) {\n    let title = event.target.value\n    if (this.timeout) clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      fetch(IMDB + encodeURIComponent(title), {\n        method: 'GET',\n      })\n        .then(response => response.json())\n        .then(data => {\n          console.log(data)\n          if (data.Response === \"False\"){\n            return\n          } \n          console.log(data.Search)\n          this.setState({ ...this.state, options: data.Search });\n        })\n        .catch((error) => {\n          console.error('Error:', error);\n        });\n    }, 300);\n  }\n\n  startStream(magnetURI) {\n    var client = new WebTorrent()\n\n    client.add(magnetURI, function (torrent) {\n      // Torrents can contain many files. Let's use the .mp4 file\n      var file = torrent.files.find(function (file) {\n        return file.name.endsWith('.mp4')\n      })\n\n      // Display the file by adding it to the DOM.\n      // Supports video, audio, image files, and more!\n      file.appendTo('player')\n    })\n  }\n\n  render() {\n\n    return (\n      <Autocomplete\n        id=\"asynchronous-demo\"\n        style={{ width: 300 }}\n        open={this.state.open}\n        onOpen={() => {\n          this.setState({ ...this.state, open: true });\n        }}\n        onClose={() => {\n          this.setState({ ...this.state, open: false });\n        }}\n        getOptionSelected={(option, value) => option.Title === value.Title}\n        getOptionLabel={option => option.Title}\n        options={this.state.options}\n        loading={this.loading}\n        renderInput={params => (\n          <TextField\n            {...params}\n            label=\"IMDB database search\"\n            variant=\"outlined\"\n            onChange={ev => {this.searchTitle(ev)}}\n            InputProps={{\n              ...params.InputProps,\n              endAdornment: (\n                <Fragment>\n                  {this.loading ? (\n                    <CircularProgress color=\"inherit\" size={20} />\n                  ) : null}\n                  {params.InputProps.endAdornment}\n                </Fragment>\n              )\n            }}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}