{"version":3,"sources":["StreamList.js","App.js","reportWebVitals.js","index.js"],"names":["StreamList","props","imdbId","state","streams","startStream","bind","this","listStreams","fetch","method","then","response","json","data","generateList","catch","error","console","event","magnetURI","target","parentElement","attributes","infohash","value","WebTorrent","add","torrent","log","files","find","file","name","endsWith","appendTo","items","stream","push","ListItem","button","ListItemText","primary","title","infoHash","onClick","Divider","setState","List","component","aria-label","Component","App","open","options","streamList","searchTitle","fetchList","window","location","href","results","i","length","toLowerCase","includes","timeout","clearTimeout","setTimeout","searchJson","document","getElementById","tconst","Autocomplete","id","style","width","onOpen","onClose","getOptionSelected","option","originalTitle","getOptionLabel","renderInput","params","TextField","label","variant","onChange","ev","InputProps","Button","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dd7c6685.chunk.js","sourcesContent":["import { Component, Fragment } from 'react';\nimport WebTorrent from 'webtorrent';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\n\nconst TPB = \"https://thepiratebay-plus.strem.fun/stream/movie/\"\n\nclass StreamList extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.imdbId = props.imdbId\n\t\tthis.state = { streams: [] }\n\t\tthis.startStream = this.startStream.bind(this)\n\t}\n\n\tcomponentDidMount(){\n\t\tthis.listStreams()\n\t}\n\n\tlistStreams() {\n\t\tfetch(`${TPB}${this.imdbId}.json`, {\n\t\t\tmethod: 'GET',\n\t\t})\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tthis.generateList(data.streams)\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error('Error:', error);\n\t\t\t});\n\t}\n\n\tstartStream(event) {\n\t\tlet magnetURI = event.target.parentElement.attributes.infohash.value\n\t\tvar client = new WebTorrent()\n\t\t\n\t\tclient.add(magnetURI, function (torrent) {\n\t\t\t// Torrents can contain many files. Let's use the .mp4 file\n\t\t\tdebugger;\n\t\t\tconsole.log(torrent.files)\n\t\t\tvar file = torrent.files.find(function (file) {\n\t\t\t\treturn file.name.endsWith('.mp4')\n\t\t\t})\n\n\t\t\t// Display the file by adding it to the DOM.\n\t\t\t// Supports video, audio, image files, and more!\n\t\t\tfile.appendTo('body')\n\t\t})\n\t}\n\n\tgenerateList(streams) {\n\t\tconst items = []\n\t\tfor (let stream of streams) {\n\t\t\titems.push(<Fragment>\n\t\t\t\t<ListItem button key={stream.infoHash}>\n\t\t\t\t\t<ListItemText key={stream.infoHash}\tprimary={stream.title} infohash={stream.infoHash} onClick={this.startStream} />\n\t\t\t\t</ListItem>\n\t\t\t\t<Divider />\n\t\t\t</Fragment>)\n\t\t}\n\t\tthis.setState({ ...this.state, streams: items })\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<List component=\"nav\" aria-label=\"mailbox folders\">\n\t\t\t\t\t{this.state.streams}\n\t\t\t\t</List>\n\t\t\t</Fragment>\n\t\t)\n\t}\n}\nexport default StreamList;","import './App.css';\nimport { Component, Fragment } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\nimport StreamList from './StreamList';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.props = props\n    this.state = {\n      open: false,\n      options: [],\n      streamList: [],\n    }\n    this.searchTitle = this.searchTitle.bind(this);\n    this.listStreams = this.listStreams.bind(this)\n    this.data = []\n    this.fetchList()\n  }\n\n  fetchList() {\n    fetch(`${window.location.href}/movies.json`, {\n      method: 'GET',\n    })\n      .then(response => response.json())\n      .then(data => {\n        this.data = data\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  }\n  searchJson(title) {\n    let results = []\n    for (var i = 0; i < this.data.length; i++) {\n      if (this.data[i][\"originalTitle\"].toLowerCase().includes(title.toLowerCase()))\n        results.push(this.data[i]);\n    }\n    return results\n  }\n\n  searchTitle(event) {\n    let title = event.target.value\n    if (this.timeout) clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => {\n      this.setState({ ...this.state, options: this.searchJson(title) });\n    }, 300);\n  }\n\n  listStreams() {\n    let items = this.searchJson(document.getElementById(\"imdb_search\").value)\n    let imdbId = items[0].tconst\n    this.setState({ ...this.state, streamList: <StreamList imdbId={imdbId} /> }) \n  }\n\n  render() {\n\n    return (\n      <Fragment>\n        <Autocomplete\n          id=\"imdb_search\"\n          style={{ width: 300 }}\n          open={this.state.open}\n          onOpen={() => { this.setState({ ...this.state, open: true }); }}\n          onClose={() => { this.setState({ ...this.state, open: false }); }}\n          getOptionSelected={(option, value) => option.originalTitle === value.originalTitle}\n          getOptionLabel={option => option.originalTitle}\n          options={this.state.options}\n          renderInput={params => (\n            <TextField\n              {...params}\n              label=\"IMDB database search\"\n              variant=\"outlined\"\n              onChange={ev => { this.searchTitle(ev) }}\n              InputProps={{\n                ...params.InputProps,\n              }}\n            />\n          )}\n        /><Button variant=\"contained\" onClick={this.listStreams}>Search Available streams</Button>\n       {this.state.streamList}\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}