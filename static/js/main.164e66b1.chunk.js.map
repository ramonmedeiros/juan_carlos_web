{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","open","options","searchTitle","bind","listStreams","data","fetchList","fetch","window","location","href","method","then","response","json","catch","error","console","title","results","i","this","length","includes","push","event","target","value","timeout","clearTimeout","setTimeout","setState","searchJson","imdbId","document","getElementById","tconst","log","stream","magnetURI","WebTorrent","add","torrent","files","find","file","name","endsWith","appendTo","Autocomplete","id","style","width","onOpen","onClose","getOptionLabel","option","originalTitle","renderInput","params","TextField","label","variant","onChange","ev","InputProps","Button","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"qyBAqHeA,E,kDA1Gb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDA,MAAQA,EACb,EAAKC,MAAQ,CACXC,MAAM,EACNC,QAAS,IAEX,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBACnB,EAAKE,KAAO,GACZ,EAAKC,YAVY,E,6CAanB,WAAa,IAAD,OACVC,MAAM,GAAD,OAAIC,OAAOC,SAASC,KAApB,gBAAwC,CAC3CC,OAAQ,QAEPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAP,GACJ,EAAKA,KAAOA,KAEbU,OAAM,SAACC,GACNC,QAAQD,MAAM,SAAUA,Q,wBAI9B,SAAWE,GAET,IADA,IAAIC,EAAU,GACLC,EAAI,EAAGA,EAAIC,KAAKhB,KAAKiB,OAAQF,IAChCC,KAAKhB,KAAKe,GAAV,cAA8BG,SAASL,IACzCC,EAAQK,KAAKH,KAAKhB,KAAKe,IAE3B,OAAOD,I,yBAGT,SAAYM,GAAQ,IAAD,OACbP,EAAQO,EAAMC,OAAOC,MACrBN,KAAKO,SAASC,aAAaR,KAAKO,SACpCP,KAAKO,QAAUE,YAAW,WACxB,EAAKC,SAAL,2BAAmB,EAAKhC,OAAxB,IAA+BE,QAAS,EAAK+B,WAAWd,QACvD,O,yBAGL,WACE,IACIe,EADQZ,KAAKW,WAAWE,SAASC,eAAe,eAAeR,OAChD,GAAGS,OACtB7B,MAAM,GAAD,OAlDG,qDAkDH,OAAU0B,EAAV,SAA0B,CAC7BtB,OAAQ,QAEPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAP,GAEJ,OADAY,QAAQoB,IAAIhC,GACLA,EAAKiC,UAEbvB,OAAM,SAACC,GACNC,QAAQD,MAAM,SAAUA,Q,yBAM9B,SAAYuB,IACG,IAAIC,KAEVC,IAAIF,GAAW,SAAUG,GAEnBA,EAAQC,MAAMC,MAAK,SAAUC,GACtC,OAAOA,EAAKC,KAAKC,SAAS,WAKvBC,SAAS,e,oBAIlB,WAAU,IAAD,OAEP,OACE,eAAC,WAAD,WACE,cAACC,EAAA,EAAD,CACEC,GAAG,cACHC,MAAO,CAAEC,MAAO,KAChBpD,KAAMqB,KAAKtB,MAAMC,KACjBqD,OAAQ,WAAO,EAAKtB,SAAL,2BAAmB,EAAKhC,OAAxB,IAA+BC,MAAM,MACpDsD,QAAS,WAAO,EAAKvB,SAAL,2BAAmB,EAAKhC,OAAxB,IAA+BC,MAAM,MAErDuD,eAAgB,SAAAC,GAAM,OAAIA,EAAOC,eACjCxD,QAASoB,KAAKtB,MAAME,QACpByD,YAAa,SAAAC,GAAM,OACjB,cAACC,EAAA,EAAD,2BACMD,GADN,IAEEE,MAAM,uBACNC,QAAQ,WACRC,SAAU,SAAAC,GAAQ,EAAK9D,YAAY8D,IACnCC,WAAU,eACLN,EAAOM,kBAIhB,cAACC,EAAA,EAAD,CAAQJ,QAAQ,YAAYK,QAAS9C,KAAKjB,YAA1C,6C,GAtGQgE,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB3D,MAAK,YAAkD,IAA/C4D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF7C,SAASC,eAAe,SAM1BkC,M","file":"static/js/main.164e66b1.chunk.js","sourcesContent":["import './App.css';\nimport { Component, Fragment } from 'react';\nimport WebTorrent from 'webtorrent';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\n\nconst TPB = \"https://thepiratebay-plus.strem.fun/stream/movie/\"\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.props = props\n    this.state = {\n      open: false,\n      options: [],\n    }\n    this.searchTitle = this.searchTitle.bind(this);\n    this.listStreams = this.listStreams.bind(this)\n    this.data = []\n    this.fetchList()\n  }\n\n  fetchList() {\n    fetch(`${window.location.href}/movies.json`, {\n      method: 'GET',\n    })\n      .then(response => response.json())\n      .then(data => {\n        this.data = data\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n  }\n\n  searchJson(title){\n    let results = []\n    for (var i = 0; i < this.data.length; i++) {\n      if (this.data[i][\"originalTitle\"].includes(title))\n        results.push(this.data[i]);\n    }\n    return results\n  }\n\n  searchTitle(event) {\n    let title = event.target.value\n    if (this.timeout) clearTimeout(this.timeout);\n    this.timeout = setTimeout(() => { \n      this.setState({ ...this.state, options: this.searchJson(title) });\n    }, 300);\n  }\n\n  listStreams(){\n    let items = this.searchJson(document.getElementById(\"imdb_search\").value)\n    let imdbId = items[0].tconst\n    fetch(`${TPB}${imdbId}.json` , {\n      method: 'GET',\n    })\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n        return data.stream\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n\n  }\n\n\n  startStream(magnetURI) {\n    var client = new WebTorrent()\n\n    client.add(magnetURI, function (torrent) {\n      // Torrents can contain many files. Let's use the .mp4 file\n      var file = torrent.files.find(function (file) {\n        return file.name.endsWith('.mp4')\n      })\n\n      // Display the file by adding it to the DOM.\n      // Supports video, audio, image files, and more!\n      file.appendTo('player')\n    })\n  }\n\n  render() {\n\n    return (\n      <Fragment>\n        <Autocomplete\n          id=\"imdb_search\"\n          style={{ width: 300 }}\n          open={this.state.open}\n          onOpen={() => {this.setState({ ...this.state, open: true });}}\n          onClose={() => {this.setState({ ...this.state, open: false });}}\n          //getOptionSelected={(option, value) => option.originalTitle === value.originalTitle}\n          getOptionLabel={option => option.originalTitle}\n          options={this.state.options}\n          renderInput={params => (\n            <TextField\n              {...params}\n              label=\"IMDB database search\"\n              variant=\"outlined\"\n              onChange={ev => { this.searchTitle(ev) }}\n              InputProps={{\n                ...params.InputProps,\n              }}\n            />\n          )}\n        /><Button variant=\"contained\" onClick={this.listStreams}>Search Available streams</Button>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}